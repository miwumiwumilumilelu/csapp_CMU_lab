                            | #rsum
                            | #rsum_list - Recursive version of sum_list
0x000:                      | .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp  # 初始化栈指针
0x00a: 808100000000000000   |     call main           # 调用 main 函数
0x013: 00                   |     halt                # 程序终止
                            | 
0x018:                      | .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a         # 节点1的值：0x00a (10)
0x020: 2800000000000000     |     .quad e1e2          # 节点1的next指针指向e1e2
0x028:                      | e1e2:
0x028: b000000000000000     |     .quad 0x0b0         # 节点2的值：0x0b0 (176)
0x030: 3800000000000000     |     .quad e1e3          # 节点2的next指针指向e1e3
0x038:                      | e1e3:
0x038: 000c000000000000     |     .quad 0xc00         # 节点3的值：0xc00 (3072)
0x040: 0000000000000000     |     .quad 0             # 节点3的next指针为NULL
                            | 
0x048:                      | rsum_list:
0x048: a0cf                 |     pushq %r12          # 保存被调用者保存寄存器 %r12
0x04a: 30f00000000000000000 |     irmovq $0, %rax     # 初始化返回值 %rax 为 0
0x054: 6277                 |     andq %rdi, %rdi     # 检查 %rdi（当前节点指针）是否为 NULL
0x056: 737e00000000000000   |     je end           # 如果为 NULL，跳转到 RETURN
0x05f: 50c70000000000000000 |     mrmovq 0(%rdi), %r12 # 将当前节点的值加载到 %r12
0x069: 50770800000000000000 |     mrmovq 8(%rdi), %rdi # 将下一个节点的地址加载到 %rdi
0x073: 804800000000000000   |     call rsum_list      # 递归调用 rsum_list
0x07c: 60c0                 |     addq %r12, %rax     # 将当前节点的值加到返回值 %rax 中
0x07e:                      | end:
0x07e: b0cf                 |     popq %r12           # 恢复 %r12
0x080: 90                   |     ret                 # 返回
                            | 
0x081:                      | main:
0x081: 30f71800000000000000 |     irmovq ele1, %rdi   # 将链表头节点地址传入 %rdi
0x08b: 804800000000000000   |     call rsum_list      # 调用 rsum_list
0x094: 90                   |     ret                 # 返回
0x200:                      | .pos 0x200
0x200:                      | stack:                  # 栈区域起始地址 0x400
