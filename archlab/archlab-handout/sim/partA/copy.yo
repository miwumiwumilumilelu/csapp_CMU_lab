                            | #copy
                            | #copy_block - Copy src to dest and return xor checksum of src
                            | 
0x000:                      | .pos 0
0x000: 30f40003000000000000 |     irmovq stack, %rsp  # 初始化栈指针
0x00a: 80a300000000000000   |     call main           # 调用 main 函数
0x013: 00                   |     halt                # 程序终止
                            | 
0x018:                      | .align 8
                            | # Source block
0x018:                      | src:
0x018: 0a00000000000000     |     .quad 0x00a         # 源数据块第1个值：0x00a (10)
0x020: b000000000000000     |     .quad 0x0b0         # 源数据块第2个值：0x0b0 (176)
0x028: 000c000000000000     |     .quad 0xc00         # 源数据块第3个值：0xc00 (3072)
                            | 
                            | # Destination block
0x030:                      | dest:
0x030: 1101000000000000     |     .quad 0x111         # 目标数据块第1个值：0x111 (初始值)
0x038: 2202000000000000     |     .quad 0x222         # 目标数据块第2个值：0x222 (初始值)
0x040: 3303000000000000     |     .quad 0x333         # 目标数据块第3个值：0x333 (初始值)
                            | 
0x048:                      | copy_block:
0x048: a0cf                 |     pushq %r12          # 保存被调用者保存寄存器 %r12
0x04a: a0df                 |     pushq %r13          # 保存被调用者保存寄存器 %r13
0x04c: a0ef                 |     pushq %r14          # 保存被调用者保存寄存器 %r14
0x04e: 30fd0100000000000000 |     irmovq $1, %r13     # %r13 = 1（用于递减长度）
0x058: 30fe0800000000000000 |     irmovq $8, %r14     # %r14 = 8（用于指针递增）
0x062: 30f00000000000000000 |     irmovq $0, %rax     # 初始化返回值 %rax 为 0
0x06c: 709100000000000000   |     jmp loop_test       # 跳转到循环条件检查
0x075:                      | loop:
0x075: 50c70000000000000000 |     mrmovq 0(%rdi), %r12 # 将 *src 加载到 %r12
0x07f: 60e7                 |     addq %r14, %rdi      # src++
0x081: 40c60000000000000000 |     rmmovq %r12, 0(%rsi) # *dest = *src
0x08b: 60e6                 |     addq %r14, %rsi      # dest++
0x08d: 63c0                 |     xorq %r12, %rax      # result ^= val
0x08f: 61d2                 |     subq %r13, %rdx      # len--
0x091:                      | loop_test:
0x091: 6222                 |     andq %rdx, %rdx      # 检查 len 是否大于 0
0x093: 767500000000000000   |     jg loop              # 如果 len > 0，继续循环
0x09c: b0ef                 |     popq %r14            # 恢复 %r14
0x09e: b0df                 |     popq %r13            # 恢复 %r13
0x0a0: b0cf                 |     popq %r12            # 恢复 %r12
0x0a2: 90                   |     ret                  # 返回
                            | 
0x0a3:                      | main:
0x0a3: 30f71800000000000000 |     irmovq src, %rdi    # 将 src 地址传入 %rdi
0x0ad: 30f63000000000000000 |     irmovq dest, %rsi   # 将 dest 地址传入 %rsi
0x0b7: 30f20300000000000000 |     irmovq $3, %rdx     # 将长度 3 传入 %rdx
0x0c1: 804800000000000000   |     call copy_block     # 调用 copy_block
0x0ca: 90                   |     ret                 # 返回
                            | 
0x300:                      | .pos 0x300
0x300:                      | stack:                  
