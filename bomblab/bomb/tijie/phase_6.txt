 ---------------------------------------------------------------------------
phase_6解析:
 ---------------------------------------------------------------------------
Dump of assembler code for function phase_6:
   0x00000000004010f4 <+0>:     push   %r14
   0x00000000004010f6 <+2>:     push   %r13
   0x00000000004010f8 <+4>:     push   %r12
   0x00000000004010fa <+6>:     push   %rbp
   0x00000000004010fb <+7>:     push   %rbx
   0x00000000004010fc <+8>:     sub    $0x50,%rsp
   0x0000000000401100 <+12>:    mov    %rsp,%r13
   0x0000000000401103 <+15>:    mov    %rsp,%rsi
   0x0000000000401106 <+18>:    call   0x40145c <read_six_numbers>
   0x000000000040110b <+23>:    mov    %rsp,%r14
   0x000000000040110e <+26>:    mov    $0x0,%r12d
   0x0000000000401114 <+32>:    mov    %r13,%rbp
   0x0000000000401117 <+35>:    mov    0x0(%r13),%eax
   0x000000000040111b <+39>:    sub    $0x1,%eax
   0x000000000040111e <+42>:    cmp    $0x5,%eax
   0x0000000000401121 <+45>:    jbe    0x401128 <phase_6+52>
   0x0000000000401123 <+47>:    call   0x40143a <explode_bomb>
   0x0000000000401128 <+52>:    add    $0x1,%r12d
   0x000000000040112c <+56>:    cmp    $0x6,%r12d
   0x0000000000401130 <+60>:    je     0x401153 <phase_6+95>
   0x0000000000401132 <+62>:    mov    %r12d,%ebx
   0x0000000000401135 <+65>:    movslq %ebx,%rax
   0x0000000000401138 <+68>:    mov    (%rsp,%rax,4),%eax
   0x000000000040113b <+71>:    cmp    %eax,0x0(%rbp)
   0x000000000040113e <+74>:    jne    0x401145 <phase_6+81>
   0x0000000000401140 <+76>:    call   0x40143a <explode_bomb>
   0x0000000000401145 <+81>:    add    $0x1,%ebx
   0x0000000000401148 <+84>:    cmp    $0x5,%ebx
   0x000000000040114b <+87>:    jle    0x401135 <phase_6+65>
   0x000000000040114d <+89>:    add    $0x4,%r13
   0x0000000000401151 <+93>:    jmp    0x401114 <phase_6+32>
   0x0000000000401153 <+95>:    lea    0x18(%rsp),%rsi
   0x0000000000401158 <+100>:   mov    %r14,%rax
   0x000000000040115b <+103>:   mov    $0x7,%ecx
   0x0000000000401160 <+108>:   mov    %ecx,%edx
   0x0000000000401162 <+110>:   sub    (%rax),%edx
   0x0000000000401164 <+112>:   mov    %edx,(%rax)
   0x0000000000401166 <+114>:   add    $0x4,%rax
   0x000000000040116a <+118>:   cmp    %rsi,%rax
   0x000000000040116d <+121>:   jne    0x401160 <phase_6+108>
   0x000000000040116f <+123>:   mov    $0x0,%esi
   0x0000000000401174 <+128>:   jmp    0x401197 <phase_6+163>
   0x0000000000401176 <+130>:   mov    0x8(%rdx),%rdx
   0x000000000040117a <+134>:   add    $0x1,%eax
   0x000000000040117d <+137>:   cmp    %ecx,%eax
   0x000000000040117f <+139>:   jne    0x401176 <phase_6+130>
   0x0000000000401181 <+141>:   jmp    0x401188 <phase_6+148>
   0x0000000000401183 <+143>:   mov    $0x6032d0,%edx
   0x0000000000401188 <+148>:   mov    %rdx,0x20(%rsp,%rsi,2)
   0x000000000040118d <+153>:   add    $0x4,%rsi
   0x0000000000401191 <+157>:   cmp    $0x18,%rsi
   0x0000000000401195 <+161>:   je     0x4011ab <phase_6+183>
   0x0000000000401197 <+163>:   mov    (%rsp,%rsi,1),%ecx
   0x000000000040119a <+166>:   cmp    $0x1,%ecx
   0x000000000040119d <+169>:   jle    0x401183 <phase_6+143>
   0x000000000040119f <+171>:   mov    $0x1,%eax
   0x00000000004011a4 <+176>:   mov    $0x6032d0,%edx
   0x00000000004011a9 <+181>:   jmp    0x401176 <phase_6+130>
   0x00000000004011ab <+183>:   mov    0x20(%rsp),%rbx
   0x00000000004011b0 <+188>:   lea    0x28(%rsp),%rax
   0x00000000004011b5 <+193>:   lea    0x50(%rsp),%rsi
   0x00000000004011ba <+198>:   mov    %rbx,%rcx
   0x00000000004011bd <+201>:   mov    (%rax),%rdx
   0x00000000004011c0 <+204>:   mov    %rdx,0x8(%rcx)
   0x00000000004011c4 <+208>:   add    $0x8,%rax
   0x00000000004011c8 <+212>:   cmp    %rsi,%rax
   0x00000000004011cb <+215>:   je     0x4011d2 <phase_6+222>
   0x00000000004011cd <+217>:   mov    %rdx,%rcx
   0x00000000004011d0 <+220>:   jmp    0x4011bd <phase_6+201>
   0x00000000004011d2 <+222>:   movq   $0x0,0x8(%rdx)
   0x00000000004011da <+230>:   mov    $0x5,%ebp
   0x00000000004011df <+235>:   mov    0x8(%rbx),%rax
   0x00000000004011e3 <+239>:   mov    (%rax),%eax
   0x00000000004011e5 <+241>:   cmp    %eax,(%rbx)
   0x00000000004011e7 <+243>:   jge    0x4011ee <phase_6+250>
   0x00000000004011e9 <+245>:   call   0x40143a <explode_bomb>
   0x00000000004011ee <+250>:   mov    0x8(%rbx),%rbx
   0x00000000004011f2 <+254>:   sub    $0x1,%ebp
   0x00000000004011f5 <+257>:   jne    0x4011df <phase_6+235>
   0x00000000004011f7 <+259>:   add    $0x50,%rsp
   0x00000000004011fb <+263>:   pop    %rbx
   0x00000000004011fc <+264>:   pop    %rbp
   0x00000000004011fd <+265>:   pop    %r12
   0x00000000004011ff <+267>:   pop    %r13
   0x0000000000401201 <+269>:   pop    %r14
   0x0000000000401203 <+271>:   ret
End of assembler dump.
 ---------------------------------------------------------------------------
   0x0000000000401100 <+12>:    mov    %rsp,%r13
   0x0000000000401103 <+15>:    mov    %rsp,%rsi
   0x0000000000401106 <+18>:    call   0x40145c <read_six_numbers>
   0x000000000040110b <+23>:    mov    %rsp,%r14
   0x000000000040110e <+26>:    mov    $0x0,%r12d
   0x0000000000401114 <+32>:    mov    %r13,%rbp
   0x0000000000401117 <+35>:    mov    0x0(%r13),%eax
   0x000000000040111b <+39>:    sub    $0x1,%eax
   0x000000000040111e <+42>:    cmp    $0x5,%eax
   0x0000000000401121 <+45>:    jbe    0x401128 <phase_6+52>
   0x0000000000401123 <+47>:    call   0x40143a <explode_bomb>
ans为六个数字
r13=rsp
rsi=rsp
r14=rsp
r12d=0
rbp=r13=rsp
eax=r13
通过p $eax 发现为第一个输入值
eax-1<=5 那么 eax<=6 对ans进行修改
 ---------------------------------------------------------------------------
   0x0000000000401128 <+52>:    add    $0x1,%r12d
   0x000000000040112c <+56>:    cmp    $0x6,%r12d
   0x0000000000401130 <+60>:    je     0x401153 <phase_6+95>
r12d初始化为0，r12d+=1与6作比较相等跳转
 ---------------------------------------------------------------------------
   0x0000000000401132 <+62>:    mov    %r12d,%ebx
   0x0000000000401135 <+65>:    movslq %ebx,%rax
   0x0000000000401138 <+68>:    mov    (%rsp,%rax,4),%eax
   0x000000000040113b <+71>:    cmp    %eax,0x0(%rbp)
   0x000000000040113e <+74>:    jne    0x401145 <phase_6+81>
   0x0000000000401140 <+76>:    call   0x40143a <explode_bomb>
ebx=r12d
eax=ebx(movslq %ebx,%rax : movs 表示“带符号扩展的移动”，l 表示源操作数是 32 位，q 表示目标操作数是 64 位)
mov    (%rsp,%rax,4),%eax  :  rsp+rax*4 因为存六个int型数，所以占4字节，指针每次移动4字节，猜测rax是rax++过程每次循环
不相等满足跳转，说明那么相邻两个值之间（目前已知rbp为栈顶，也可能是不能与栈顶相等）不能重复
 ---------------------------------------------------------------------------
   0x0000000000401145 <+81>:    add    $0x1,%ebx
   0x0000000000401148 <+84>:    cmp    $0x5,%ebx
   0x000000000040114b <+87>:    jle    0x401135 <phase_6+65>
ebx从1开始,为了遍历到第六个数,所以<=5 ; 这类似于循环for(int i=1;i<6;i++)
 ---------------------------------------------------------------------------
   0x0000000000401135 <+65>:    movslq %ebx,%rax
   0x0000000000401138 <+68>:    mov    (%rsp,%rax,4),%eax
   0x000000000040113b <+71>:    cmp    %eax,0x0(%rbp)
   0x000000000040113e <+74>:    jne    0x401145 <phase_6+81>
   0x0000000000401140 <+76>:    call   0x40143a <explode_bomb>
   0x0000000000401145 <+81>:    add    $0x1,%ebx
   0x0000000000401148 <+84>:    cmp    $0x5,%ebx
   0x000000000040114b <+87>:    jle    0x401135 <phase_6+65>
回去发现一直在遍历输入值，然后与栈顶比较，那么确定刚才括号里的猜测是正确的，是不能与栈顶相等！！！
 ---------------------------------------------------------------------------
   0x000000000040114d <+89>:    add    $0x4,%r13
   0x0000000000401151 <+93>:    jmp    0x401114 <phase_6+32>
   0x0000000000401114 <+32>:    mov    %r13,%rbp
   0x0000000000401117 <+35>:    mov    0x0(%r13),%eax
这个牛，更新了栈顶为下一个输入值，然后再那它进行循环以上的内层循环
那么大循环套小循环，说明刚才的猜测最终结果是每个元素均不相等！！！
 ---------------------------------------------------------------------------
   0x0000000000401153 <+95>:    lea    0x18(%rsp),%rsi
   0x0000000000401158 <+100>:   mov    %r14,%rax
   0x000000000040115b <+103>:   mov    $0x7,%ecx
   0x0000000000401160 <+108>:   mov    %ecx,%edx
   0x0000000000401162 <+110>:   sub    (%rax),%edx
   0x0000000000401164 <+112>:   mov    %edx,(%rax)
   0x0000000000401166 <+114>:   add    $0x4,%rax
   0x000000000040116a <+118>:   cmp    %rsi,%rax
   0x000000000040116d <+121>:   jne    0x401160 <phase_6+108>
rsi=rsp+24 指向第七个int？ p *(int *)($rsp+0x18)发现rsi指向地址存值为0
rax=r14=rsp
ecx=7
edx=ecx=7
edx=edx-a[i]=7-a[i]
mov    %edx,(%rax) : 将rax即栈顶的a[i]更新为7-a[i] ! ! !
add    $0x4,%rax
cmp    %rsi,%rax
jne    0x401160 <phase_6+108>
好好好，这下看懂了，0是终止条件，依旧从栈顶遍历将a[i]改成7-a[i] 后面叫b[i]
 ---------------------------------------------------------------------------
   0x000000000040116f <+123>:   mov    $0x0,%esi
   0x0000000000401174 <+128>:   jmp    0x401197 <phase_6+163>
   0x0000000000401197 <+163>:   mov    (%rsp,%rsi,1),%ecx
   0x000000000040119a <+166>:   cmp    $0x1,%ecx
esi=0
ecx=rsp
如果b[1]<=1那么跳转到143,否则继续：
---------------------------------------------------------------------------
1.不跳转:
   0x000000000040119f <+171>:   mov    $0x1,%eax
   0x00000000004011a4 <+176>:   mov    $0x6032d0,%edx
   0x00000000004011a9 <+181>:   jmp    0x401176 <phase_6+130>
eax=1
p *0x6032d0 为332 ？why 332?
   0x0000000000401176 <+130>:   mov    0x8(%rdx),%rdx
   0x000000000040117a <+134>:   add    $0x1,%eax
   0x000000000040117d <+137>:   cmp    %ecx,%eax
   0x000000000040117f <+139>:   jne    0x401176 <phase_6+130>
   0x0000000000401181 <+141>:   jmp    0x401188 <phase_6+148> //相等后跳转到2.中148处
rdx=$0x6032d0+8k ? why +8k? k表示循环次数
以rdx为栈顶的话那么查看一下$0x6032d0附近的东西
x/30 0x6042d0 发现链表！！！
0x6032d0 <node1>:       332     1       6304480 0
0x6032e0 <node2>:       168     2       6304496 0
0x6032f0 <node3>:       924     3       6304512 0
0x603300 <node4>:       691     4       6304528 0
0x603310 <node5>:       477     5       6304544 0
0x603320 <node6>:       443     6       0       0
这就解决了为什么有332，以及为什么每次移动8字节，因为一个节点共16字节，前两个为整型数，最后一个为指针，而指针是下一个节点地址，那么移动过去2个int也就是8字节就到了下一个节点的地址
eax++
每次循环ecx与eax比较（ecx是b[1]）
 ---------------------------------------------------------------------------
2.跳转:其实就是<=1，那么就不需要移动rdx指针
   0x0000000000401183 <+143>:   mov    $0x6032d0,%edx
---------------------------------------------------------------------------
   0x0000000000401188 <+148>:   mov    %rdx,0x20(%rsp,%rsi,2)
   0x000000000040118d <+153>:   add    $0x4,%rsi
   0x0000000000401191 <+157>:   cmp    $0x18,%rsi
   0x0000000000401195 <+161>:   je     0x4011ab <phase_6+183>
rsp + 32 + 2 * rsi = rdx（更新一个新栈的基地址为rsp+32，估计存刚才一顿操作的指向节点）
rsi + = 4 后与 24 比较（rdx每次变化8字节,符合链表指针移动，一直到rsi=24，也就是移动了6次到第七个位置，遍历完六个节点，才跳转到183）
 ---------------------------------------------------------------------------
   0x0000000000401197 <+163>:   mov    (%rsp,%rsi,1),%ecx
   0x000000000040119a <+166>:   cmp    $0x1,%ecx
ecx存距离,用于130后的循环，满足rdx加到正确位置
rsp存的是b[i],那么 ecx = rsp + rsi
ecx<=1跳转到143，否则重置eax=1，edx=0x6032d0跳转到130
---------------------------------------------------------------------------
发现141到181一直在做循环：
输入的值，会对应7-该值为距离，在链表上会移动相应距离，取出node放在rsp+32为基地址的新栈上，按顺序
关键一步:0x0000000000401188 <+148>:   mov    %rdx,0x20(%rsp,%rsi,2)
---------------------------------------------------------------------------
上面真难，跳转出来的条件没仔细看，我按自己stepi调试
---------------------------------------------------------------------------
   0x00000000004011ab <+183>:   mov    0x20(%rsp),%rbx
   0x00000000004011b0 <+188>:   lea    0x28(%rsp),%rax
   0x00000000004011b5 <+193>:   lea    0x50(%rsp),%rsi
   0x00000000004011ba <+198>:   mov    %rbx,%rcx
   0x00000000004011bd <+201>:   mov    (%rax),%rdx
   0x00000000004011c0 <+204>:   mov    %rdx,0x8(%rcx)
   0x00000000004011c4 <+208>:   add    $0x8,%rax
   0x00000000004011c8 <+212>:   cmp    %rsi,%rax
   0x00000000004011cb <+215>:   je     0x4011d2 <phase_6+222>
   0x00000000004011cd <+217>:   mov    %rdx,%rcx
   0x00000000004011d0 <+220>:   jmp    0x4011bd <phase_6+201>
rbx=rsp+32
rax=rbx+8(第二个位置)
rsi=rbx+48(结束的位置)
rcx=rbx=rsp+32
经过mov    (%rax),%rdx后
p /x $rdx 查看rdx存的值的16进制 0x603310
mov    %rdx,0x8(%rcx)
这两步实现了连接链表的过程，就是第二位置的地址给到第一个位置进行存储node1.next=node2
mov    %rdx,%rcx
rax+=8
然后把rax存的值放入rdx，所以rdx也相当于+8
p /x $rdx 发现为第三个位置再跳转到201
发现node2.next=node3
所以这里一直在做链表连接
---------------------------------------------------------------------------
   0x00000000004011d2 <+222>:   movq   $0x0,0x8(%rdx)
   0x00000000004011da <+230>:   mov    $0x5,%ebp
   0x00000000004011df <+235>:   mov    0x8(%rbx),%rax
   0x00000000004011e3 <+239>:   mov    (%rax),%eax
   0x00000000004011e5 <+241>:   cmp    %eax,(%rbx)
   0x00000000004011e7 <+243>:   jge    0x4011ee <phase_6+250>
   0x00000000004011e9 <+245>:   call   0x40143a <explode_bomb>

   0x00000000004011ee <+250>:   mov    0x8(%rbx),%rbx
   0x00000000004011f2 <+254>:   sub    $0x1,%ebp
   0x00000000004011f5 <+257>:   jne    0x4011df <phase_6+235>
movq   $0x0,0x8(%rdx) rdx此时遍历到了第六个节点可以通过地址查看，然后+8将第七个位置设置为0
ebp=5
rax=rsp +32+8
rbx=rsp +32
比较存的两个值，如果第一位置值小于第二位置值那么bomb！所以从应该大于等于，又因为早些时候知道不能重复，那么不会相等
rbx+=8
ebp-=1表示循环次数，6个节点比较5次
ebp!=0就跳转继续下一轮循环
因此前面节点大于后面节点，是单调递减的
---------------------------------------------------------------------------
根据以上信息：
1/单调递减的
2/由b[i]充当node中的比较大小的value
3/b[i]跟a[i]有关7-a[i]
4/新链表由旧链表映射过来，然后进行连接进行组排
旧链表信息：
0x6032d0 <node1>:       332     1       6304480 0
0x6032e0 <node2>:       168     2       6304496 0
0x6032f0 <node3>:       924     3       6304512 0
0x603300 <node4>:       691     4       6304528 0
0x603310 <node5>:       477     5       6304544 0
0x603320 <node6>:       443     6       0       0

对其从高到低排列
924	3	7-3=4
691	4	7-4=3
477	5	7-5=2
443	6	7-6=1
332	1	7-1=6
168	2	7-2=5
所以最后ans为 4 3 2 1 6 5
密码的真累啊第六个
---------------------------------------------------------------------------
movslq %ebx,%rax : movs 表示“带符号扩展的移动”，l 表示源操作数是 32 位，q 表示目标操作数是 64 位
 ---------------------------------------------------------------------------
