2024/1/28
#score:36/36 完成4道题
#make clean
#make bits.c
#./btest
#./dlc #这个文件用来约束代码规范
/* howManyBits - return the minimum number of bits required to represent x in
 *             two's complement
 *  Examples: howManyBits(12) = 5
 *            howManyBits(298) = 10
 *            howManyBits(-5) = 4
 *            howManyBits(0)  = 1
 *            howManyBits(-1) = 1
 *            howManyBits(0x80000000) = 32
 *  Legal ops: ! ~ & ^ | + << >>
 *  Max ops: 90
 *  Rating: 4
 */
int howManyBits(int x) {
    x=conditional(x>>31&1,~x,x);//x?~x:x 正数为最左边1＋1（符号位0）负数为最左边0+1（符号位1） 全部转成正数则都为最左边1+1
    //(~!(x>>16)+1) 高16位有1则为0，无则为-1
    int bits16=~(~!(x>>16)+1)&16;//16 0
    x>>=bits16;
    int bits8=~(~!(x>>8)+1)&8;//8 0
    x>>=bits8;
    int bits4=~(~!(x>>4)+1)&4;//4 0
    x>>=bits4;
    int bits2=~(~!(x>>2)+1)&2;//2 0
    x>>=bits2;
    int bits1=~(~!(x>>1)+1)&1;//1 0
    x>>=bits1;
    int bits0=x;
    int bits=bits16+bits8+bits4+bits2+bits1+bits0+1;
    return bits;
}
//float
/*
 * floatScale2 - Return bit-level equivalent of expression 2*f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representation of
 *   single-precision floating point values.
 *   When argument is NaN, return argument
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned floatScale2(unsigned uf) {
        unsigned s=uf>>31;
        unsigned expr=uf>>23&0xFF;
        unsigned frac=uf&0x7FFFFF;
       //(-1)^s * (M) * (2^E)
//E=expr-bias=expr-127
        //0
        if(expr==0&&frac==0)
                return uf;
        //NaN or inf
        if(expr==0xFF)
                return uf;
        //非规格化
        if(expr==0){
                frac<<=1;
                return (s<<31)|frac;
        }
        //规格化
        //e+1,E=e-bias+1-->E++-->f*2
        expr+=1;
        return (s<<31)|(expr<<23)|frac;
}
/*
 * floatFloat2Int - Return bit-level equivalent of expression (int) f
 *   for floating point argument f.
 *   Argument is passed as unsigned int, but
 *   it is to be interpreted as the bit-level representation of a
 *   single-precision floating point value.
 *   Anything out of range (including NaN and infinity) should return
 *   0x80000000u.
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
int floatFloat2Int(unsigned uf) {
        unsigned s=uf>>31;
        unsigned expr=uf>>23&0xFF;
        unsigned frac=uf&0x7FFFFF;
//规格化：s 非0xx非1xx f
//非规格化: s 0xx f
//inf: s 1xx 0xx
//NaN: s 1xx 非0xx
        //0
         if(expr==0&&frac==0)
                return 0;
        //inf or NaN
        if(expr==0xFF)
                return 1<<31;
        //非规格化 M=0.xxx<1
        if(expr==0){
                return 0;
        }
        //规格化 M=1.xxx>1
        int E=expr-127;
        frac=frac|(1<<23);//转成1.f
        if(E<0)
                return 0;
        else if(E>31)//溢出
                return 1<<31;
        if(E<=23)
                frac>>=(23-E);//右移截断低位,小数
        else frac<<=(E-23);//左移扩展，保证23位
        if(s) frac=~frac+1;
        return frac;
}
/*
 * floatPower2 - Return bit-level equivalent of the expression 2.0^x
 *   (2.0 raised to the power x) for any 32-bit integer x.
 *
 *   The unsigned value that is returned should have the identical bit
 *   representation as the single-precision floating-point number 2.0^x.
 *   If the result is too small to be represented as a denorm, return
 *   0. If too large, return +INF.
 *
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. Also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned floatPower2(int x) {
   int expr=x+127;
   if(x>=128) return 0xFF<<23;//inf,指数位全1
   if(x>=-126) return expr<<23;//规格，指数位移动相应位置
   if(x>=-149) return 1<<(x+149);//非规格[-149,-126)，2^-(x+149)
   return 0;
}
#--------------------------------------------
#浮点数的IEEE表示
