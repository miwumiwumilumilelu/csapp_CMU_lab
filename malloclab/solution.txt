--------------------------------------------------------
Malloc Lab 要求实现一个动态内存分配器，
需要实现 malloc，free 和 realloc 函数，
目标是正确、利用率高且高效。
--------------------------------------------------------
Utilization(空间利用率)，为malloc与realloc分配且未被free的内存与当前堆内存的大小的比值。即浪费的内存越少越好。
Throughput(吞吐量)，单位时间内完成的平均请求数。即时间复杂度要尽量小。
--------------------------------------------------------
需要管理的堆内存是一块连续的区域。分配器将这块区域分配成很多块来管理，
每个块的大小不一定相同，并且有一些在被使用中，或者已经free掉，
但是相邻两个块如果都是free的，那么会需要把它们合并起来，合并的策略也不一样，
这里简单用立即合并，即free掉某个块后，发现旁边有free的块，就合并
--------------------------------------------------------
malloc的函数定义是void* malloc(size_t size)
拿出一个比size更大的块，返回给用户该块的地址，这个块之后就不能再分配给其它人了。
--------------------------------------------------------
free的函数定义是void free(void* p)
free只给定了一个指针，我们需要知道到底需要释放多少内存，即给出去的指针里，我们需要从这上面能得知分配的大小等信息。
所以我们可以把完整的块定义成这样:
header block_size footer
--------------------------------------------------------
看九曲阑干直播课:

/* 基础宏*/

#define WSIZE 4 // 字长4字节，块头尾信息也为4字节
#define DSIZE 8
#define CHUNKSIZZE (1 << 12) // 堆初始化大小 4KB 正好是页大小
​
#define MAX(x, y) ((x) > (y)) ? (x) : (y)
/* 把块大小和信息位结合*/
#define PACK(size, alloc) ((size) | (alloc))
/* 在地址p处读写 */
#define GET(p) (*(unsigned int *)(p))
#define PUT(p, val) (*(unsigned int *)(p) = (val))
​
/* 从头部或脚部 获取块大小和信息位的值 */
#define GET_SIZE(p) (GET(p) & ~0x07)
#define GET_ALLOC(p) (GET(p) & 0x1)
​
/*给定块指针bp，其指向有效载荷，计算头部和尾部指针*/
#define HDRP(bp) ((char *)(bp) - WSIZE)
#define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)
​
/* 给定块指针bp, 计算先前块和后面块的地址 */
#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE((char *)(bp) - WSIZE))
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE((char *)(bp) - DSIZE))
--------------------------------------------------------
mm_init:
--------------------------------------------------------
int mm_init(void) {
    // 申请四个字（每个字4字节）用于存储起始块、结尾块和序言块
    if ((heap_listp = mem_sbrk(4 * WSIZE)) == (void *)-1)
        return -1;
    PUT(heap_listp, 0);                     // 哨兵头：未分配
    PUT(heap_listp + WSIZE, PACK(8, 1));       // 已分配块A（8字节）
    PUT(heap_listp + 2 * WSIZE, PACK(8, 1));       // 已分配块B（8字节）
    PUT(heap_listp + 3 * WSIZE, PACK(0, 1));       // 哨兵尾：已分配,信息位为1，是为了防止越界
    heap_listp += (2 * WSIZE);                   // 移动到哨兵尾的位置,后续操作从哨兵尾开始管理空闲链表
    // 申请一个初始的空闲块（CHUNKSIZE默认4KB）
    if (extend_heap(CHUNKSIZE / WSIZE) == NULL)
        return -1; // 扩展失败
    return 0; // 初始化成功
}
--------------------------------------------------------
extend_heap:
--------------------------------------------------------
/* 扩展堆 以字为单位*/
void *extend_heap(size_t words)
{
    char *bp;
    size_t size;

    size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE; //按块对齐
    if ((long)(bp = mem_sbrk(size)) == -1)
        return NULL; // 申请失败
        
     // 初始化新扩展区域为自由块
    PUT(HDRP(bp), PACK(size, 0)); // 设置头部和脚部
    PUT(FTRP(bp), PACK(size, 0));
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); // 设置结尾块的信息位为1,多往后移动一块，作为保险区域，防止溢出

    // 扩展堆之后，结尾块后面紧跟的就是有效载荷，结尾块变成该载荷的头部
    return coalesce(bp);
}
--------------------------------------------------------
coalesce:
--------------------------------------------------------
/*
 * coalesce - 合并相邻空闲块（边界标记法核心实现）
 * @bp: 需要合并的块指针
 * 返回值：合并后的块指针
 */
static void *coalesce(void *bp) {
    // 获取相邻块的分配状态
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp))); // 前一块是否分配
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp))); // 后一块是否分配
    size_t size = GET_SIZE(HDRP(bp)); // 当前块原始大小

    /* 情况1：前后块都已分配（无需合并）*/
    if (prev_alloc && next_alloc) {
        return bp;
    }
    /* 情况2：合并后侧空闲块 */
    else if (prev_alloc && !next_alloc) {
        size += GET_SIZE(HDRP(NEXT_BLKP(bp))); // 合并后块大小
        // 更新合并块的元数据
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size, 0));
    }
    /* 情况3：合并前侧空闲块 */
    else if (!prev_alloc && next_alloc) {
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        // 将指针移动到前块起始位置
        PUT(FTRP(bp), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    /* 情况4：合并两侧空闲块 */
    else {
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + 
                GET_SIZE(FTRP(NEXT_BLKP(bp)));
        // 更新前块的元数据
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    return bp;
}
--------------------------------------------------------
mm_malloc:
--------------------------------------------------------
/*
 * mm_malloc - 内存分配核心函数
 * @size: 请求分配的字节数
 * 返回值：分配的内存块指针
 */
void *mm_malloc(size_t size) {
    size_t asize;      // 调整后的块大小
    size_t extendsize; // 需要扩展的堆大小
    char *bp;

    if (size == 0) return NULL;

    // 调整请求大小（包含元数据开销并保持对齐）
    if (size <= DSIZE)
        asize = 2 * DSIZE;  // 最小块大小（16字节：头尾各4，有效载荷8）
    else
        asize = DSIZE * ((size + (DSIZE) + (DSIZE - 1)) / DSIZE); // 向上对齐到8的倍数

    // 在空闲链表中寻找合适块
    if ((bp = find_fit(asize)) != NULL) {
        place(bp, asize);
        return bp;
    }

    // 没有合适块则扩展堆
    extendsize = MAX(asize, CHUNKSIZE);
    if ((bp = extend_heap(extendsize / WSIZE)) == NULL)
        return NULL;
    place(bp, asize);
    return bp;
}
--------------------------------------------------------
find_fit:
--------------------------------------------------------
/*
 * find_fit - 首次适配搜索策略
 * @asize: 需要分配的调整后大小
 * 返回值：找到的空闲块指针或NULL
 */
static void *find_fit(size_t asize) {
    // 从头开始遍历隐式空闲链表
    for (void *bp = heap_listp; GET_SIZE(HDRP(bp)) > 0; bp = NEXT_BLKP(bp)) {
        if (!GET_ALLOC(HDRP(bp)) && (asize <= GET_SIZE(HDRP(bp)))) {
            return bp;
        }
    }
    return NULL;
}
--------------------------------------------------------
place:
--------------------------------------------------------
/* 
 * place - 将请求的内存块放置到找到的空闲块中，可能分割剩余空间
 * @bp: 指向空闲块的指针
 * @asize: 需要分配的大小（包括头部和脚部，已对齐）
 */
void place(void *bp, size_t asize) {
    size_t csize = GET_SIZE(HDRP(bp)); // 获取当前空闲块的总大小
    
    // 如果剩余空间足够大（至少16字节，用于维护新块的头部、脚部和最小有效载荷）
    if ((csize - asize) >= 2 * DSIZE) {
        // 将当前块标记为已分配，并设置其大小为asize
        PUT(HDRP(bp), PACK(asize, 1)); // 写入头部
        PUT(FTRP(bp), PACK(asize, 1)); // 写入脚部
        bp = NEXT_BLKP(bp); // 移动到剩余部分的起始地址
        // 将剩余空间初始化为新的空闲块
        PUT(HDRP(bp), PACK(csize - asize, 0)); // 剩余块头部
        PUT(FTRP(bp), PACK(csize - asize, 0)); // 剩余块脚部
    } else {
        // 剩余空间不足，整个块都分配出去，不分割
        PUT(HDRP(bp), PACK(csize, 1)); // 更新头部为已分配
        PUT(FTRP(bp), PACK(csize, 1)); // 更新脚部为已分配
    }
}
--------------------------------------------------------
mm_free:
--------------------------------------------------------
/* 
 * mm_free - 释放内存块并合并相邻的空闲块
 * @ptr: 要释放的内存块指针（指向有效载荷）
 */
void mm_free(void *ptr) {
    size_t size = GET_SIZE(HDRP(ptr)); // 获取块的总大小
    // 将头部和脚部标记为未分配
    PUT(HDRP(ptr), PACK(size, 0)); 
    PUT(FTRP(ptr), PACK(size, 0));
    coalesce(ptr); // 合并相邻空闲块
}
--------------------------------------------------------
mm_realloc:
--------------------------------------------------------
/* 
 * mm_realloc - 重新分配内存大小（存在潜在错误）
 * @ptr: 原内存块指针
 * @size: 新请求的大小
 * 实现方式：分配新块，复制数据，释放旧块
 * 注意：原实现中获取原块大小的方式有误，正确方法应使用GET_SIZE宏
 */
void *mm_realloc(void *ptr, size_t size) {
    void *oldptr = ptr;
    void *newptr;
    size_t copySize;
    
    newptr = mm_malloc(size); // 分配新块
    if (newptr == NULL)
      return NULL;
    // 错误：原代码直接通过指针运算获取大小，应改用GET_SIZE
    // copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE); // 错误写法
    copySize = GET_SIZE(HDRP(oldptr)); // 正确获取原块大小
    if (size < copySize)  // 确保拷贝大小不超过新块容量
      copySize = size;
    memcpy(newptr, oldptr, copySize); // 数据拷贝
    mm_free(oldptr); // 释放原块
    return newptr;
}
--------------------------------------------------------
./mdriver -V -f short1-bal.rep
进行案例测试:
--------------------------------------------------------
